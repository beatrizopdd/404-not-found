Formato padrão esperado para todas as variáveis de uma fase:

Variáveis simples:

    Sem categoria:
    -> chao/fundo da fase
    -> tile padrão do chão <- importante
    -> parede externa
    -> áudios diversos
    -> tela, teclado

    Controle de fps:
    -> cronometro_fps
    -> frames
    -> taxa_de_quadros

    Buggy
    -> sprite da buggy
    -> virada_para: string contendo para qual lado buggy está virada
       possibilidades: "CIMA", "BAIXO", "ESQUERDA", "DIREITA"
    
    Interface
    -> carinhas
    -> barra_choque
    -> barra_tela_azul
    -> iu_choque: timer pra atualização da barra de choque
    -> iu_tela_azul: timer pra atualização da barra de tela azul
    -> frame_barra_choque: frame onde a barra de choque está
    -> frame_barra_ta: frame onde a barra de tela azul está


Vetores comuns:

    Paredes:
    -> Cada cópia de uma parede mXn está em um vetor de nome paredeMXN
       Paredes que só fazem uma aparição são unidas em um vetor parede_unica
    
    Debugger:
    -> ABNT DE FASE
    
    Mecanismos:
    -> ponteiro_entrada: vetor de todos os ponteiros de entradas
    -> ponteiro_saída: todos os ponteiros de saída sincronizados por índice
       aos ponteiros de entrada
    
    IU:
    -> elementos_iu: vetor de todos os elementos da interface do usuário

Dicionários struct de pobre:

    disparo:
    -> ["imagem"] guarda a GameImage;
    -> ["direção"] string: direção do disparo (veja virada_para);
    -> ["velocidade"] int/float: velocidade do disparo;
    -> ["ativo"] booleana: se o disparo está ativo em campo ou não
    
    desconfiometro: 
    -> ["pre_desc"] booleana: se o debugger fez um primeiro contato com a buggy e ativa a pausa
    -> ["pausa_timer"] int: duração da pausa
    -> ["desc"] booleana: desconfiometro ligado ou não
    -> ["limite_desc"] int: tolerancia do desconfiometro

Matrizes:

	timer_tela_azul: matriz de inteiros com a duração do efeito da tela azul em cada debugger
	tela_azul: matriz de booleanas para indicar quais debuggers estão sob efeito

	visibilidade: se a buggy colidir com um esconderijo a visibilidade é falsa

    paredes: matriz contendo todos os vetores de paredeMXN e parede_unica
    ponteiros: matriz com os vetores de ponteiros de entrada e saída

    Obsoleto: 	mecanismos: matriz de ponteiros e esconderijos (atrapalha a ordem de desenho)
    
				Esconderijo
				-> quantidade de esconderijos
				-> alvo: debugger que vai ser invocado pelo sacrificio do esconderijo
				-> esconderijo_colisao: se o debugger ja chegou no esconderijo depois de desviar
				-> esconderijo_tempo: quanto tempo o debugger vai analisar o esconderijo
				-> esconderijo_debugger: correspondencia entre o esconderijo e o debugger
